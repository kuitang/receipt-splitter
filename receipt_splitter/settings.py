"""
Django settings for receipt_splitter project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
from django.core.management.utils import get_random_secret_key

SECRET_KEY = os.getenv('SECRET_KEY')
if not SECRET_KEY:
    if os.getenv('DEBUG', 'False').lower() == 'true':
        # Development only: generate a random key or use a dev key
        SECRET_KEY = "django-insecure-2@f+(h+c6&_gvyyoxj7%v5@-a2tksqx9tt6ty(v76vl@9&)94k"
        print("WARNING: Using development SECRET_KEY. Never use in production!")
    else:
        # Production: MUST have SECRET_KEY environment variable
        from django.core.exceptions import ImproperlyConfigured
        raise ImproperlyConfigured(
            "SECRET_KEY environment variable must be set in production! "
            "Generate one with: python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'"
        )

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

# Get base allowed hosts
allowed_hosts = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1,0.0.0.0,testserver').split(',')

# Add Fly.io app domain
app_name = os.getenv('FLY_APP_NAME')
if app_name:
    allowed_hosts.append(f"{app_name}.fly.dev")
else:
    # Fallback for any .fly.dev domain
    allowed_hosts.append('.fly.dev')

# Add Fly.io internal network ranges for health checks and internal routing
fly_internal_ranges = [
    '172.16.0.0/12',  # Fly.io private network range
    '10.0.0.0/8',     # Common private network range
    '192.168.0.0/16', # Private network range
]
allowed_hosts.extend(fly_internal_ranges)

# Add development-specific hosts when DEBUG is True
if DEBUG:
    allowed_hosts.extend([
        '192.168.0.0/16',  # Local network range in CIDR notation
        '.local',          # .local domains (with leading dot for subdomains)
        'kui-vibes',       # Custom development host
    ])

# For production, also allow specific internal IPs we've seen in logs
if not DEBUG:
    allowed_hosts.extend([
        '172.19.4.18',  # Specific IP from error logs
        '172.19.0.0/16', # Broader range for Fly.io internal
    ])

ALLOWED_HOSTS = allowed_hosts

# CSRF trusted origins for Fly.io (both HTTP and HTTPS for internal routing)
CSRF_TRUSTED_ORIGINS = [
    'https://*.fly.dev',
    'http://*.fly.dev',  # Fly.io internal routing
    'http://localhost:8000',
    'http://127.0.0.1:8000',
]

# Security settings - external services handle SSL
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Trust proxy headers from Fly.io in production
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_X_FORWARDED_HOST = True

# SSL/HTTPS Security Settings
SECURE_SSL_REDIRECT = False  # Fly.io handles redirect at proxy level

# Critical: Secure cookies in production!
if not DEBUG:
    SESSION_COOKIE_SECURE = True  # Only send session cookie over HTTPS
    CSRF_COOKIE_SECURE = True     # Only send CSRF cookie over HTTPS
else:
    SESSION_COOKIE_SECURE = False  # Allow HTTP in development
    CSRF_COOKIE_SECURE = False     # Allow HTTP in development


# Application definition

INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "channels",
    "receipts",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "receipts.middleware.session_middleware.ReceiptSessionMiddleware",  # Session management
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_ratelimit.middleware.RatelimitMiddleware",
    "receipts.middleware.SimpleStrictCSPMiddleware",  # Strict CSP without unsafe-inline
]

ROOT_URLCONF = "receipt_splitter.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "receipt_splitter.wsgi.application"

ASGI_APPLICATION = "receipt_splitter.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    },
}


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration with PostgreSQL support for production
DATABASES = {
    "default": dj_database_url.config(
        default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}",
        conn_max_age=600,
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Static files storage configuration
if DEBUG:
    # Development: Use simple static files storage
    STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"
    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
    }
else:
    # Production: Use whitenoise with manifest
    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
        "staticfiles": {
            "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
        },
    }

# Media files no longer needed - step images moved to static files

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

DATA_RETENTION_DAYS = 30

# Rate limiting configuration for django-ratelimit
RATELIMIT_ENABLE = True  # Enable rate limiting
RATELIMIT_VIEW = None    # Use default 429 view
RATELIMIT_FAIL_OPEN = False  # Fail closed (block if rate limit check fails)

SESSION_ENGINE = "django.contrib.sessions.backends.db"
SESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript access to session cookie
SESSION_COOKIE_SAMESITE = "Lax"  # CSRF protection
SESSION_COOKIE_AGE = 86400 * 30  # 30 days for convenience (receipts are low-risk)
SESSION_SAVE_EVERY_REQUEST = True  # Update session expiry on each request (rolling timeout)
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Keep sessions for returning users
SESSION_COOKIE_NAME = 'sessionid'  # Standard name
SESSION_COOKIE_PATH = '/'  # Available across entire site

# Logging configuration
import logging

# Log current mode for debugging
logger = logging.getLogger(__name__)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'receipts': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'ocr_lib': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Startup logging is handled in receipts/apps.py:ReceiptsConfig.ready()

# File upload size limits
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB

# Rate limiting configuration
RATELIMIT_ENABLE = True
RATELIMIT_VIEW = 'receipts.views.ratelimit_exceeded'
